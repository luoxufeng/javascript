<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title> 这个样例说明如何使用模型中的集合来存储数据，以及如何将数据的改变绑定到视图</title>
</head>
<body>
    <script src="../Scripts/jquery-1.4.1.min.js" type="text/javascript"></script>
    <script src="../Scripts/json2.js" type="text/javascript"></script>
    <script src="../Scripts/underscore.js" type="text/javascript"></script>
    <script src="../Scripts/backbone.js" type="text/javascript"></script>
    <script type="text/javascript">
        (function ($) {

            var Item = Backbone.Model.extend({
                defaults: {
                    part1: 'hello',
                    part2: 'world'
                }
            });


            var List = Backbone.Collection.extend({
                model: Item
            });

            var ListView = Backbone.View.extend({
                el: $('body'),
                events: {
                    'click button#add': 'addItem'
                },

                initialize: function () {
                    _.bindAll(this, 'render', 'addItem', 'appendItem'); // remember: every function that uses 'this' as the current object should be in here

                    this.collection = new List();
                    this.collection.bind('add', this.appendItem); // collection event binder

                    this.counter = 0;
                    this.render();
                },
                render: function () {

                    var self = this;
                    $(this.el).append("<button id='add'>Add list item</button>");
                    $(this.el).append("<ul></ul>");
                    _(this.collection.models).each(function (item) { // in case collection is not empty
                        self.appendItem(item);
                    }, this);
                },

                addItem: function () {
                    this.counter++;
                    var item = new Item();
                    item.set({
                        part2: item.get('part2') + this.counter // modify item defaults
                    });
                    this.collection.add(item); // add item to collection; view is updated via event 'add'
                },

                appendItem: function (item) {
                    $('ul', this.el).append("<li>" + item.get('part1') + " " + item.get('part2') + "</li>");
                }
            });

            var listView = new ListView();
        })(jQuery);
    </script>
</body>
</html>
